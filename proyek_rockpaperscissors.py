# -*- coding: utf-8 -*-
"""Proyek RockPaperScissors.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jX_A-Z1g2xXT_iqPUrQM0tKBbPXYSQZJ
"""

#import modul
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import zipfile, os
import pandas as pd
import shutil
from tqdm.notebook import tqdm as tq
from tensorflow.keras.layers import GlobalMaxPooling2D, Dense, Activation, Dropout

#import dan ekstrak data
datasource = '/content/drive/My Drive/Colab Notebooks/rockpaperscissors.zip'
dataref = zipfile.ZipFile(datasource, 'r')
dataref.extractall('/tmp')
dataref.close()

#membuat direktori rock, paper, scissor (train, validation)
#memisahkan file di folder rps-cv-images
dir_source = '/tmp/rockpaperscissors/rockpaperscissors/rps-cv-images'
file_name = []
tag = []
full_path = []
for path, subdirs, files in os.walk(dir_source): #untuk setiap komponen di dalam folder dir_source
  for name in files: #untuk setiap nama di semua file tersebut
        full_path.append(os.path.join(path, name)) #full_path diperoleh dari path ditambah dengan name
        tag.append(path.split('/')[-1]) #tag diperoleh dari string path dipisah berdasarkan '/' dan diambil yang bagian paling belakang
        file_name.append(name) #file_name diperoleh dari nama file

#memasukan variabel yang sudah dikumpulkan pada looping di atas menjadi sebuah dataframe
data01 = pd.DataFrame({"path":full_path,'file_name':file_name,"tag":tag}) #membuat dataframe baru dengan kolom path, file_name, tag
data01.groupby(['tag']).size() #menampilkan dataframe dengan grouping berdasarkan tag

#variabel yang digunakan untuk pemisahan data
x = data01['path']
y = data01['tag']

#memisahkan dataset awal menjadi data train dan validation
x_train, x_val, y_train, y_val = train_test_split(
    x, y, train_size=0.7
)

#menyatukan kedalam masing-masing dataframe
df_train = pd.DataFrame({'path':x_train
              ,'tag':y_train
             ,'set':'train'})

df_val = pd.DataFrame({'path':x_val
              ,'tag':y_val
             ,'set':'validation'})

#melihat jumlah variabel train dan validation
print('train size', len(df_train))
print('validation size', len(df_val))

#melihat proporsi pada masing-masing dataset
df_all = df_train.append([df_val]).reset_index(drop=1)\

print('===================================================== \n')
print(df_all.groupby(['set','tag']).size(),'\n') #menampilkan dataframe tersebut dengan grouping berdasarkan set dan tag

print('===================================================== \n')

#cek sample datanya
df_all.sample(3)

datasource_path = '/tmp/rockpaperscissors/rockpaperscissors/rps-cv-images'
dataset_path = '/tmp/rockpaperscissors/rockpaperscissors/datasets'

for index, row in tq(df_all.iterrows()):
    #mendefinisikan file path
    file_path = row['path']
    if os.path.exists(file_path) == False:
            file_path = os.path.join(datasource_path,row['tag'],row['image'].split('.')[0])             
    #membuat folder destinasi
    if os.path.exists(os.path.join(dataset_path,row['set'],row['tag'])) == False:
        os.makedirs(os.path.join(dataset_path,row['set'],row['tag']))
    #menentukan file destinasi
    destination_file_name = file_path.split('/')[-1]
    file_dest = os.path.join(dataset_path,row['set'],row['tag'],destination_file_name)
    #copy file dari source ke destinasi
    if os.path.exists(file_dest) == False:
        shutil.copy2(file_path,file_dest)

#membuat direktori kombinasi (train, val) dan (rock, paper, scissors)
train_dir = '/tmp/rockpaperscissors/rockpaperscissors/datasets/train'
validation_dir = '/tmp/rockpaperscissors/rockpaperscissors/datasets/validation'
train_paper_dir = os.path.join(train_dir, 'paper')
train_rock_dir = os.path.join(train_dir, 'rock')
train_scissors_dir = os.path.join(train_dir, 'scissors')
val_paper_dir = os.path.join(validation_dir, 'paper')
val_rock_dir = os.path.join(validation_dir, 'rock')
val_scissors_dir = os.path.join(validation_dir, 'scissors')

#membuat sebuah objek imagedatagenerator utk data training dan validation
train_datagen = ImageDataGenerator(
                    rescale=1/255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest'
)
 
validation_datagen = ImageDataGenerator(
                    rescale=1/255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest'
)

#mempelajari data latih yang akan dipelajari oleh model
train_generator = train_datagen.flow_from_directory(
        train_dir,  # direktori data latih
        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4,
        class_mode='categorical' 
)
 
validation_generator = validation_datagen.flow_from_directory(
        validation_dir, # direktori data validasi
        target_size=(150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4, 
        class_mode='categorical' 
)

#membuat arsitektur sebuah CNN
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

#memanggil fungsi compile dan menentukan optimizer dan loss function
model.compile(
    loss='categorical_crossentropy',
    optimizer=tf.optimizers.Adam(learning_rate=0.00001),
    metrics=['accuracy']
)

#melatih model dengan metode fit
model.fit(
      train_generator,
      steps_per_epoch=25,  # berapa batch yang akan dieksekusi pada setiap epoch
      epochs=50,
      validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
      validation_steps=5,  # berapa batch yang akan dieksekusi pada setiap epoch
      verbose=2
)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0]==1:
    print('paper')
  elif classes[0][1]==1:
    print('rock')
  elif classes[0][2]==1:
    print('scissors')
  else:
    print('not available')